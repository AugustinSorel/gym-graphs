/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TeamsRouteImport } from './routes/teams'
import { Route as IndexRouteImport } from './routes/index'
import { Route as settingsSettingsRouteImport } from './routes/(settings)/settings'
import { Route as dashboardDashboardRouteImport } from './routes/(dashboard)/dashboard'
import { Route as authLayoutRouteImport } from './routes/(auth)/_layout'
import { Route as exercisesExercisesExerciseIdRouteImport } from './routes/(exercises)/exercises.$exerciseId'
import { Route as authLayoutVerifyEmailRouteImport } from './routes/(auth)/_layout.verify-email'
import { Route as authLayoutSignUpRouteImport } from './routes/(auth)/_layout.sign-up'
import { Route as authLayoutSignInRouteImport } from './routes/(auth)/_layout.sign-in'
import { Route as authLayoutResetPasswordRouteImport } from './routes/(auth)/_layout.reset-password'
import { Route as authLayoutResetPasswordTokenRouteImport } from './routes/(auth)/_layout.reset-password_.$token'

const authRouteImport = createFileRoute('/(auth)')()

const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamsRoute = TeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const settingsSettingsRoute = settingsSettingsRouteImport.update({
  id: '/(settings)/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardDashboardRoute = dashboardDashboardRouteImport.update({
  id: '/(dashboard)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const authLayoutRoute = authLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)
const exercisesExercisesExerciseIdRoute =
  exercisesExercisesExerciseIdRouteImport.update({
    id: '/(exercises)/exercises/$exerciseId',
    path: '/exercises/$exerciseId',
    getParentRoute: () => rootRouteImport,
  } as any)
const authLayoutVerifyEmailRoute = authLayoutVerifyEmailRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutSignUpRoute = authLayoutSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutSignInRoute = authLayoutSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutResetPasswordRoute = authLayoutResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutResetPasswordTokenRoute =
  authLayoutResetPasswordTokenRouteImport.update({
    id: '/reset-password_/$token',
    path: '/reset-password/$token',
    getParentRoute: () => authLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authLayoutRouteWithChildren
  '/teams': typeof TeamsRoute
  '/dashboard': typeof dashboardDashboardRoute
  '/settings': typeof settingsSettingsRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-in': typeof authLayoutSignInRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/verify-email': typeof authLayoutVerifyEmailRoute
  '/exercises/$exerciseId': typeof exercisesExercisesExerciseIdRoute
  '/reset-password/$token': typeof authLayoutResetPasswordTokenRoute
}
export interface FileRoutesByTo {
  '/': typeof authLayoutRouteWithChildren
  '/teams': typeof TeamsRoute
  '/dashboard': typeof dashboardDashboardRoute
  '/settings': typeof settingsSettingsRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-in': typeof authLayoutSignInRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/verify-email': typeof authLayoutVerifyEmailRoute
  '/exercises/$exerciseId': typeof exercisesExercisesExerciseIdRoute
  '/reset-password/$token': typeof authLayoutResetPasswordTokenRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/teams': typeof TeamsRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/(dashboard)/dashboard': typeof dashboardDashboardRoute
  '/(settings)/settings': typeof settingsSettingsRoute
  '/(auth)/_layout/reset-password': typeof authLayoutResetPasswordRoute
  '/(auth)/_layout/sign-in': typeof authLayoutSignInRoute
  '/(auth)/_layout/sign-up': typeof authLayoutSignUpRoute
  '/(auth)/_layout/verify-email': typeof authLayoutVerifyEmailRoute
  '/(exercises)/exercises/$exerciseId': typeof exercisesExercisesExerciseIdRoute
  '/(auth)/_layout/reset-password_/$token': typeof authLayoutResetPasswordTokenRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/teams'
    | '/dashboard'
    | '/settings'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/verify-email'
    | '/exercises/$exerciseId'
    | '/reset-password/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/teams'
    | '/dashboard'
    | '/settings'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/verify-email'
    | '/exercises/$exerciseId'
    | '/reset-password/$token'
  id:
    | '__root__'
    | '/'
    | '/teams'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/(dashboard)/dashboard'
    | '/(settings)/settings'
    | '/(auth)/_layout/reset-password'
    | '/(auth)/_layout/sign-in'
    | '/(auth)/_layout/sign-up'
    | '/(auth)/_layout/verify-email'
    | '/(exercises)/exercises/$exerciseId'
    | '/(auth)/_layout/reset-password_/$token'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TeamsRoute: typeof TeamsRoute
  authRoute: typeof authRouteWithChildren
  dashboardDashboardRoute: typeof dashboardDashboardRoute
  settingsSettingsRoute: typeof settingsSettingsRoute
  exercisesExercisesExerciseIdRoute: typeof exercisesExercisesExerciseIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(settings)/settings': {
      id: '/(settings)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof settingsSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/dashboard': {
      id: '/(dashboard)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof dashboardDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof authRoute
    }
    '/(exercises)/exercises/$exerciseId': {
      id: '/(exercises)/exercises/$exerciseId'
      path: '/exercises/$exerciseId'
      fullPath: '/exercises/$exerciseId'
      preLoaderRoute: typeof exercisesExercisesExerciseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/_layout/verify-email': {
      id: '/(auth)/_layout/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof authLayoutVerifyEmailRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/sign-up': {
      id: '/(auth)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authLayoutSignUpRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/sign-in': {
      id: '/(auth)/_layout/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authLayoutSignInRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/reset-password': {
      id: '/(auth)/_layout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authLayoutResetPasswordRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/reset-password_/$token': {
      id: '/(auth)/_layout/reset-password_/$token'
      path: '/reset-password/$token'
      fullPath: '/reset-password/$token'
      preLoaderRoute: typeof authLayoutResetPasswordTokenRouteImport
      parentRoute: typeof authLayoutRoute
    }
  }
}

interface authLayoutRouteChildren {
  authLayoutResetPasswordRoute: typeof authLayoutResetPasswordRoute
  authLayoutSignInRoute: typeof authLayoutSignInRoute
  authLayoutSignUpRoute: typeof authLayoutSignUpRoute
  authLayoutVerifyEmailRoute: typeof authLayoutVerifyEmailRoute
  authLayoutResetPasswordTokenRoute: typeof authLayoutResetPasswordTokenRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutResetPasswordRoute: authLayoutResetPasswordRoute,
  authLayoutSignInRoute: authLayoutSignInRoute,
  authLayoutSignUpRoute: authLayoutSignUpRoute,
  authLayoutVerifyEmailRoute: authLayoutVerifyEmailRoute,
  authLayoutResetPasswordTokenRoute: authLayoutResetPasswordTokenRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TeamsRoute: TeamsRoute,
  authRoute: authRouteWithChildren,
  dashboardDashboardRoute: dashboardDashboardRoute,
  settingsSettingsRoute: settingsSettingsRoute,
  exercisesExercisesExerciseIdRoute: exercisesExercisesExerciseIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
